//===============================================================
// Name: Oladayo Robert Oyedeji
// File: a11q05.cpp
//
// Description
// This program peforms addition for positive integers
// up to 1000 digits.
//==============================================================

#include <iostream>

int main()
{
    const int MAX = 1000;
    int x[MAX] = {0};
    int x_len = 0;
    int y[MAX] = {0};
    int y_len = 0;
    int t[MAX] = {0};
    int t_len;
    int c[MAX] = {0};
    int carry = 0;

//==============================================================
// This gets the users input
//==============================================================
    for (int i = 0; i < MAX; ++i)
    {
        std::cin >> x[i];
        if (x[i] == -1) break;
        x_len++;
    }
//=============================================================


    
//=============================================================
// Second input integer
//=============================================================    
    for (int i = 0; i < MAX; ++i)
    {
        std::cin >> y[i];
        if (y[i] == -1) break;
        y_len++;
    }
//=============================================================


    
//=============================================================
// Makes the highest distance 
//=============================================================
    if (x_len > y_len) t_len = x_len;
    else t_len = y_len;
//=============================================================

    

//=============================================================
// Getting the addition of each integer on each slot and
// And computes the carry for each slots
//=============================================================
    for (int i = x_len - 1, j = y_len - 1, k = t_len - 1; i >= 0 || j >= 0; i--, j--, k--)
    {
        if (i >= 0 && j >= 0)
        {
            t[k] = (x[i] + y[j] + carry) % 10;
            carry = (x[i] + y[j] + carry) / 10;
        }
        else if (i >= 0)
        {
            t[k] = (x[i] + carry) % 10;
            carry = (x[i] + carry) / 10;
        }
        else if (j >= 0)
        {
            t[k] = (y[j] + carry) % 10;
            carry = (y[j] + carry) / 10;
        }
        c[k] = carry;
    }
//=============================================================




//=============================================================
// Gets the addition of both integers
//=============================================================
    if (carry == 1)
    {
        t_len++;
        for (int i = t_len - 1; i > 0; i--)
        {
            t[i] = t[i - 1];
            
        }
        t[0] = carry;
    }
//=============================================================



//=============================================================
// Prints out the carry                                       |
//=============================================================
    int l = 0;
    int d;
    if (t_len == x_len + 1)
    {
        d = -2;
        
    }
    else if (y_len > x_len && t_len == y_len + 1)
    {
        d = -2;
    }
    else d = -1;
    for (int j = d; j < t_len; j++)
    {
        if (j >= 0)
        {
            if (c[l] == 0)
            {
                std::cout << ' ';
            }
            else
            {
                std::cout << c[l];
            }
            
            l++;
        }
        else
        {
            std::cout << ' ';
        }
    }
    std::cout << std::endl;
//=============================================================



//=============================================================
// Prints out the first digits                                |
//=============================================================
    int k = 0;
    for (int j = -2; j < t_len; j++)
    {
        if (j >= t_len - x_len)
        {
            
            std::cout << x[k];
            k++;
        }
        else
        {
            std::cout << ' ';
        }
    }
//=============================================================



//=============================================================
// Prints the second digits
//=============================================================
    std::cout << std::endl << '+';
    int i = 0;
    for (int j = -1; j < t_len; j++)
    {
        if (j >= t_len - y_len)
        {
            
            std::cout << y[i];
            i++;
        }
        else
        {
            std::cout << ' ';
        }
    }
    std::cout << std::endl;
//=============================================================


//=============================================================
// Prints answer                                              |
//=============================================================
    for (int i = 0; i < t_len + 2; i++)
    {
        std::cout << '-';
    }
    std::cout << std::endl;
    k = 0;
    for (int j = -2; j < t_len; j++)
    {
        if (j >= 0)
        {
            
            std::cout << t[k];
            k++;
        }
        else
        {
            std::cout << ' ';
        }
    }
    std::cout << std::endl;
    for (int i = 0; i < t_len + 2; i++)
    {
        std::cout << '-';
    }
    std::cout << std::endl;
//==============================================================    
    
    
    return 0;
}

    
